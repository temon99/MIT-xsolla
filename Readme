# 🔧 Project Setup

1. clone the repo  -- git clone "https://github.com/temon99/MIT-xsolla.git"
2. Open repo in vs code & pull the latest code from main branch
3. run in terminal npm install
4. run in terminal npx playwright install
5. now create a .env file in project root
6. In .env file add XSOLLA_BASE_URL=(site url)
7. webshop-- download file from drive = "Will update Soon"
   demo-- download file from drive "Will Update Soon"
8. extract it then copy all files and paste  in project

📂 Folder Structure should be like below

project-root/
│
├── tests/
│   └── login.spec.js
│
├── pages/
│   ├── XsollaHomePage.js
│   ├── GoogleLoginPage.js
│   └── GmailOtpFetcher.js
│
├── utils/
│   └── imapClient.js
│
├── playwright.config.js
└── package.json

9. run any test with command and root for example :  npx playwright test "./tests/Webshop/Main/main.spec.js"


- Note -- if you are running same test continuously then delete diff_output whole folder from root before each test to clear cache

This project provides a fully automated **visual regression testing pipeline** using:

- ✅ [Playwright](https://playwright.dev/) for browser automation
- ✅ Screenshots from your **live web app**
- ✅ Baseline UI designs exported directly from **Figma**
- 🧪 Pixel-by-pixel comparison with a beautifully generated HTML report

## 🌟 New Features

- Can login in any site by fetching OTP from Gmail.

## 🚀 Existing Features

- Pull baseline screenshots directly via Figma API
- Capture actual screenshots from production pages
- Auto-crop and diff to align dimensions
- HTML report with side-by-side Expected / Actual / Diff comparison
- Scroll-to-bottom support to ensure full content rendering
- Modular structure for easy reuse across pages, modules, and devices


⚠️ Limitation:
If a top component mismatches, it can misalign all components below it — making debugging difficult until the top section is fixed.

---

## 📦 Prerequisites

Make sure you have the following installed:

- [Node.js v18+, preferred to use v20.17.0](https://nodejs.org/en/download/)
- Git
- A Figma personal access token (for downloading design baselines) and you should have page export permission

---

## 🔧 Project Setup

After cloning the repo:

```bash
git clone https://github.com/temon99/MIT-xsolla.git
cd playwright-visual-regression

```Install dependencies

1. npm install
2. npx playwright install
3. now create a .env file in project root
4. In .env file add "BASE_URL=(site url)"
   For example: BASE_URL=https://sitebuilder.xsolla.com/preview/baseball-clash-main-redesign
5. create a directory in root with name "expected_screenshots"
6. download file from drive "Will Upload soon"
7. extract it then copy all files and paste in expected_screenshot folder in project
8. run any test with command and root for example : npx playwright test "./tests/Webshop/Main/main.spec.js"


```Install Playwright browsers:
npx playwright install
#  npm install -g cors-anywhere //for bypass cors error

```Add .env file
npm install dotenv
Add a file with .env
Add FIGMA_TOKEN ,FIGMA_FILE_KEY,BASE_URL

```Run a Visual Test
npx playwright test

``` open the HTML report directly after test run:
start diff_output/report.html     # On Windows
open diff_output/report.html      # On macOS

npx playwright test "./tests/visualTry/aboutUs.spec.js"

📂 Folder Structure

playwright-visual-regression/
├── figma/                        # Download baseline from Figma
│   └── download.ts
│
├── pages/                        # Page Object Models (e.g. TestPage)
│   └── PaystationPage.ts
│
├── tests/visual/                # Playwright test specs
│   └── paystation.spec.ts
│
├── utils/                       # Reusable helpers
│   ├── common/scrollUtils.ts   # Page scroll logic
│   ├── compareScreenshots.ts   # Core pixel comparison logic
│   └── report/products/...     # HTML report templates per product/module
│
├── expected_screenshots/       # Baseline images from Figma
│
├── diff_output/                # Diff results, actuals, HTML report


## 🧪 How to Add a New Module (e.g., Checkout Page)

Follow these steps to integrate and test a new module against Figma designs:

---

### 🔧 1. Setup Environment

## Create a `.env` file (if it doesn’t exist already) in the project root and add:

```env
FIGMA_TOKEN=your_figma_access_token
FIGMA_FILE_KEY=your_figma_file_key
BASE_URL=https://your-app-url.com

## 🎨 2. Add Baseline Frame in Figma
Open your module frame in Figma (e.g., Checkout).
Copy the fileKey and nodeId from the URL.

```Update the figma.config.ts file:

nodes: {
  paystation: '5214:24158',
  checkout: '7319:12653' // ← Add new module here
};

## 📸 3. Download Baseline Screenshot
Run the following command to pull the baseline image from Figma:

```npm run figma:download
📁 Output: expected_screenshots/checkout/baseline.png

##🧭 4. Add Page Slug
In the pages/ directory:

Create or update a file like checkout.ts
Define navigation, rendering logic, and slug routing

##🧱 5. Create Page Object (Optional)
If the module requires custom actions or reusable locators:

Add a new file in pageObjects/ (e.g., CheckoutPage.ts)
Define helper methods or locators

##🧪 6. Write the Test Spec
In the tests/ or specs/ folder:

Add a file like checkout.spec.js
Follow the pattern of existing tests to compare actual vs. expected screenshots
Use utilities like compareScreenshots() for visual diffing

##📊 7. Update HTML Report (Optional)
To enhance viewport-specific diff reporting:

Edit the utils/htmlReport logic
The generated report will show pixel differences across viewports